{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","username","email","CardList","robots","cardsArray","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAeeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,gCACE,mCAAMJ,EAAMK,KAAZ,OACA,kCAAKL,EAAMM,SAAX,OACA,kCAAKN,EAAMO,MAAX,cCqBOC,EA3BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEXC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GAOnC,OACE,cAAC,EAAD,CAEET,GAAIK,EAAOI,GAAGT,GACdC,KAAMI,EAAOI,GAAGR,KAChBC,SAAUG,EAAOI,GAAGP,SACpBC,MAAOE,EAAOI,GAAGN,OAJZM,MASX,OACE,8BACGH,KCTQI,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKf,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,G,MARA,SAACpB,GACd,OACE,qBAAKqB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACGxB,EAAMyB,aCuBEC,E,kDAzBb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,GAEvBC,QAAQC,IAAI,W,+BAIZ,OAAIC,KAAKN,MAAMC,SAEN,sDAGFK,KAAKjC,MAAMyB,Y,gDAhBYI,GAE9B,MAAO,CAAED,UAAU,O,GARKM,aCuDbC,G,wDAhDb,aAAe,IAAD,8BACZ,gBAmBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEvB,YAAasB,EAAME,OAAOC,SAnB1C,EAAKb,MAAQ,CACXlB,OAAQ,GACRM,YAAa,IAJH,E,gEAQO,IAAD,OAClB0B,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CAAC7B,OAAQoC,S,+BAUnB,IAAD,OACDC,EAAiBb,KAAKN,MAAMlB,OAAOsC,QAAO,SAAAC,GAC9C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKvB,MAAMZ,YAAYkC,kBAGlE,OAAiC,IAA7BhB,KAAKN,MAAMlB,OAAO0C,OACb,yCAGH,qBAAKlD,UAAU,KAAf,SACE,eAAC,EAAD,WACE,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWe,aAAciB,KAAKG,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAU3B,OAAQqC,e,GAvChBM,IAAMlB,YCITmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f628f4e4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n      <div>\n        <h2> {props.name} </h2>\n        <p> {props.username} </p>\n        <p> {props.email} </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  \n  const cardsArray = robots.map((user, i) => {\n\n    // Uncomment to throw error and test ErrorBoundary\n    // if (true) {\n    //   throw new Error('NOOOOOOOO!');\n    // }\n\n    return (\n      <Card\n        key={i} \n        id={robots[i].id} \n        name={robots[i].name}\n        username={robots[i].username}\n        email={robots[i].email}\n        />\n    );\n  })\n\n  return (\n    <div>\n      {cardsArray}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflow: 'scroll', border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(\"Error\");\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport 'tachyons';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({robots: users})\n      });\n\n    // this.setState({robots: robots});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n          <div className=\"tc\">\n            <ErrorBoundary>\n              <h1 className=\"f1\"> RoboFriends </h1>\n              <SearchBox searchChange={this.onSearchChange}/>\n              <Scroll>\n                <CardList robots={filteredRobots} />\n              </Scroll>\n            </ErrorBoundary>\n          </div>\n        );\n      }\n    }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}